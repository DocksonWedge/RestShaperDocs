openapi: '3.0.2'
info:
  title: REST Shaper
  version: '1.0'
servers:
  - url: http://104.238.214.177:8080
paths:
  /shaper/run:
    post:
      description: Begins a test run asynchrounously agains the specified endpoint. Use `GET /shaper/status` to check for completion. 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/run'
      responses:
        '202':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  runId:
                    type: string
                    description: UUID that identifiess a test 
                    example: 34e4ef55-59a3-421c-afff-6aa7bfcc4f41
        '400':
          description: INVALID DATA
  /shaper/status/{runId}:
    parameters:
      - in: path
        name: runId
        description: A UUID returned by `/shaper/run` identifying a test execution.
        required: true
        schema: 
          type: string
    get:
      description: Returns the scurrent status of a test run. Once the run is DONE, this will also return a results summary with result IDs that can be used to generate the detailed report.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status: 
                    description: The current status of the specified test run.
                    type: string
                    enum:
                      - "DONE"
                      - "IN_PROGRESS"
                  results:
                    description: The ids of completed results. Only populated when status is DONE.
                    type: array
                    items:
                      type: object
                      properties:
                        resultId:
                          type: string
                          description: UUID identifying a test result
                        responseCode: 
                          type: integer
                          description: The HTTP status code returned by the request
                          example: 500
                        endpoint: 
                          type: string
                          description: The endpoint under test during for this result
        '404':
          description: NOT FOUND
  /shaper/result/{resultId}:
    parameters:
        - in: path
          name: resultId
          description: A UUID returned by `/shaper/status` identifying a test result.
          required: true
          schema: 
            $ref: '#/components/schemas/result'
    get:
      description: Returns an html report with details of the call tree that led to the specified result.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: The visual report for call tree leading to the specified request.             
        '404':
          description: NOT FOUND
components:
  schemas:
    param:
      type: object
      properties:
        name: 
          type: string
          description: The name or key for the parameter
        value: 
          type: string
          description: The value to pass for the parameter
    result:
      description: result detials for a specified test
      type: object
      properties:
        resultId: 
          type: string
          description: uuid of the test result
        responseCode:
          description: The HTTP status code returned by the request under test
          type: integer
          example: 500
        method:
          description: the REST API method under test
          example: 401
          type: string
        path:
          type: string
          description: the api path under test
          example: /pet/{petId}
        url:
          type: string
          description: the url under test for this result
          example: https://petstore.swagger.io/
        runId:
          type: string
          description: UUID representing the full test run
        inputBody:
          type: string
          description: a JSON string that was passed as a body in the test
        jsonResponse:
          type: string
          description: The json response returned by the api under test
        sourceResults:
          description: list of results that led to the parent result. Shares the same format.
          type: array
          items:
            $ref: '#/components/schemas/result'
    run:  
      required:
        - endpoints
        - swaggerUrl
      description: data required to start a test run
      type: object
      properties: 
        numCases: 
          type: integer
          default: 1
          description: The number of tests to run on each endpoint.
        chainDepth:
          type: integer
          default: 1
          description: The number of chains to potentially run. Each endpoint will be run numCases times, then this will repeat chainDepth times.
        endpoints: 
          type: array
          description: The endpoints from the open api spec to test.
          items:
            type: object
            properties:
              method:
                type: string
                description: The REST API method for the endpoint under test.
                example: GET
              path: 
                type: string
                description: The url path of the endpoint under test
                example: /pet/{pet_id}
        swaggerUrl: 
          type: string
          description: URL of the swagger doc to to test.
          example: https://petstore.swagger.io/v2/swagger.json
        staticParams:
          type: object
          description: parameters to pass to EVERY request in the run.
          properties:
            queryParams:
              type: array
              items:
                $ref: '#/components/schemas/param'
            pathParams:
              type: array
              items:
                $ref: '#/components/schemas/param'
            headers:
              type: array
              items:
                $ref: '#/components/schemas/param'
            cookies:
              type: array
              items:
                $ref: '#/components/schemas/param'

